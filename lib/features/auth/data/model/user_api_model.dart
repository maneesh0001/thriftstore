// features/auth/data/model/user_api_model.dart
import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:thrift_store/features/auth/domain/entity/user_entity.dart'; // Import UserEntity

part 'user_api_model.g.dart'; // This file will be generated by build_runner

@JsonSerializable()
class UserApiModel extends Equatable {
  @JsonKey(name: '_id') // Assuming your user profile also has an _id from the backend
  final String? id;
  final String name;
  final String email;
  final String? role;
  // Add other profile-specific fields here that your API sends/receives
  final String? phoneNumber;
  final String? address;

  const UserApiModel({
    this.id,
    required this.name,
    required this.email,
    this.role,
    this.phoneNumber,
    this.address,
  });

  factory UserApiModel.fromJson(Map<String, dynamic> json) =>
      _$UserApiModelFromJson(json);

  Map<String, dynamic> toJson() => _$UserApiModelToJson(this);

  // Convert UserApiModel to UserEntity
  UserEntity toUserEntity() {
    return UserEntity(
      id: id,
      name: name,
      email: email,
      // The password field in UserEntity is problematic here if UserApiModel doesn't contain it.
      // If UserEntity *must* have a password, consider if it's nullable or if
      // this conversion implies a default/empty password for profile data.
      password: '', // Placeholder, adjust based on UserEntity's password handling
      role: role,
      // You'll need to add phoneNumber and address to UserEntity if you want to map them
      // from UserApiModel to UserEntity. For now, they are not in your UserEntity.
    );
  }

  // Convert UserEntity to UserApiModel for updating profile
  factory UserApiModel.fromUserEntity(UserEntity entity) {
    return UserApiModel(
      id: entity.id,
      name: entity.name,
      email: entity.email,
      role: entity.role,
      // If UserEntity doesn't have these, they'll be null or require default values.
      phoneNumber: null, // Adjust if UserEntity includes this
      address: null,     // Adjust if UserEntity includes this
    );
  }

  @override
  List<Object?> get props => [
        id,
        name,
        email,
        role,
        phoneNumber,
        address,
      ];
}