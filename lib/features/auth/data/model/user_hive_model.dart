// features/auth/data/model/user_hive_model.dart
import 'package:equatable/equatable.dart';
import 'package:hive/hive.dart';
import 'package:thrift_store/features/auth/domain/entity/user_entity.dart'; // Import UserEntity

part 'user_hive_model.g.dart'; // This file will be generated by build_runner

@HiveType(typeId: 1) // Assign a unique typeId, different from AuthHiveModel's typeId
class UserHiveModel extends Equatable {
  @HiveField(0)
  final String? id;
  @HiveField(1)
  final String name;
  @HiveField(2)
  final String email;
  @HiveField(3)
  final String password; // Again, reconsider storing raw passwords in Hive
  @HiveField(4)
  final String? role;
  

  const UserHiveModel({
    this.id,
    required this.name,
    required this.email,
    required this.password,
    this.role,
    
  });

  // Convert UserHiveModel to UserEntity
  UserEntity toUserEntity() {
    return UserEntity(
      id: id,
      name: name,
      email: email,
      password: password,
      role: role,
     
    );
  }

  // Convert UserEntity to UserHiveModel
  factory UserHiveModel.fromUserEntity(UserEntity entity) {
    return UserHiveModel(
      id: entity.id,
      name: entity.name,
      email: entity.email,
      password: entity.password,
      role: entity.role,
      
    );
  }

  @override
  List<Object?> get props => [
        id,
        name,
        email,
        password,
        role,
        
      ];
}