// features/auth/data/model/auth_hive_model.dart
import 'package:equatable/equatable.dart';
import 'package:hive/hive.dart';
import 'package:thrift_store/features/auth/domain/entity/auth_entity.dart';

part 'auth_hive_model.g.dart'; // This file will be generated by build_runner

@HiveType(typeId: 0) // Assign a unique typeId across all HiveTypes in your app
class AuthHiveModel extends Equatable{
  @HiveField(0)
  final String? userId;
  @HiveField(1)
  final String name;
  @HiveField(2)
  final String email;
  @HiveField(3)
  final String password; // Be cautious: usually store tokens, not raw passwords
  @HiveField(4)
  final String? role;

  const AuthHiveModel({
    this.userId,
    required this.name,
    required this.email,
    required this.password,
    this.role,
  });

  // Convert AuthHiveModel to AuthEntity
  AuthEntity toAuthEntity() {
    return AuthEntity(
      userId: userId,
      name: name,
      email: email,
      password: password, // Consider security implications
      role: role,
    );
  }

  // Convert AuthEntity to AuthHiveModel
  factory AuthHiveModel.fromAuthEntity(AuthEntity entity) {
    return AuthHiveModel(
      userId: entity.userId,
      name: entity.name,
      email: entity.email,
      password: entity.password,
      role: entity.role,
    );
  }

  @override
  List<Object?> get props => [
        userId,
        name,
        email,
        password,
        role,
      ];
}